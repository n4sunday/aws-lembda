service: sls-api

custom:
  tables:
    USER_TABLE: "users-table-${self:provider.stage}"
    POST_TABLE: "post-table-${self:provider.stage}"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-southeast-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
        - { "Fn::GetAtt": ["PostDynamoDBTable", "Arn"] }
  environment:
    USERS_TABLE: ${self:custom.tables.USER_TABLE}
    POST_TABLE: ${self:custom.tables.POST_TABLE}

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: "ANY {proxy+}"

resources:
  Resources:
    UsersDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.USER_TABLE}
    PostDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: post_id
            AttributeType: S
        KeySchema:
          - AttributeName: post_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.POST_TABLE}
